{
    "name": "app",
    "version": "3.0.2",
    "description": "One Complete Observability platform.",
    "main": "ts",
    "type": "module",
    "dependencies": {
        "@types/lodash": "^4.14.202",
        "eslint-plugin-progress": "^0.0.1",
        "ts-node": "^10.9.2",
        "typeorm": "^0.3.18"
    },
    "devDependencies": {
        "@babel/core": "^7.17.8",
        "@babel/plugin-proposal-class-properties": "^7.16.7",
        "@babel/plugin-proposal-private-methods": "^7.16.11",
        "@typescript-eslint/eslint-plugin": "^5.16.0",
        "@typescript-eslint/parser": "^5.16.0",
        "@babel/eslint-parser": "^7.11.0",
        "ejs-lint": "^1.2.2",
        "eslint": "^8.22.0",
        "eslint-config-airbnb": "^19.0.4",
        "eslint-config-prettier": "^8.5.0",
        "eslint-plugin-import": "^2.25.4",
        "eslint-plugin-jsx-a11y": "^6.5.1",
        "eslint-plugin-prettier": "^4.0.0",
        "eslint-plugin-react": "^7.29.4",
        "eslint-plugin-react-hooks": "^4.3.0",
        "eslint-plugin-unused-imports": "^2.0.0",
        "husky": "^7.0.0",
        "lint-staged": "^13.2.1",
        "nodemon": "^2.0.20",
        "prettier": "^2.6.0"
    },
    "scripts": {
        "config-to-dev": "node ./Scripts/Install/ReplaceValueInConfig.js ENVIRONMENT development",
        "config-to-ci": "node ./Scripts/Install/ReplaceValueInConfig.js ENVIRONMENT ci",
        "config-to-test": "node ./Scripts/Install/ReplaceValueInConfig.js ENVIRONMENT test && node ./Scripts/Install/ReplaceValueInConfig.js APP_TAG test",
        "config-to-production": "node ./Scripts/Install/ReplaceValueInConfig.js ENVIRONMENT production",
        "prerun": "bash configure.sh",
        "typeorm": "node --require ts-node/register ./node_modules/typeorm/cli.js",
        "uninstall": "bash uninstall.sh",
        "lint": "ejslint **/*.ejs && eslint '**/*.ts*' -c .eslintrc.json --ignore-path .eslintignore ",
        "fix-lint": " node --max_old_space_size=18192 ./node_modules/.bin/eslint '**/*.ts*' -c .eslintrc.json --ignore-path .eslintignore --fix --cache",
        "fix": "npm run fix-lint",
        "status-check": "bash ./Tests/Scripts/status-check.sh $npm_config_services",
        "start": "export $(grep -v '^#' config.env | xargs) && docker compose up --remove-orphans -d $npm_config_services && npm run status-check",
        "ps": "export $(grep -v '^#' config.env | xargs) &&  docker compose ps",
        "save-logs": "export $(grep -v '^#' config.env | xargs) && docker compose logs --tail=100000 $npm_config_services > logs.txt",
        "logs": "export $(grep -v '^#' config.env | xargs) && docker compose logs --tail=100 -f $npm_config_services",
        "write-logs": "export $(grep -v '^#' config.env | xargs) && docker compose logs -f $npm_config_services > logs.txt",
        "build": "export $(grep -v '^#' config.env | xargs) && docker compose -f docker-compose.dev.yml build $npm_config_services",
        "force-build": "export $(grep -v '^#' config.env | xargs) && npm run prerun && docker compose -f docker-compose.dev.yml build  --no-cache $npm_config_services",
        "force-build-dev": "npm run config-to-dev && npm run force-build",
        "kill": "npm run stop",
        "prod": "npm run config-to-prod && export $(grep -v '^#' config.env | xargs) && docker compose up -f docker-compose.yml -d",
        "dev": "npm run config-to-dev && npm run prerun && export $(grep -v '^#' config.env | xargs) && docker compose -f docker-compose.dev.yml up  --remove-orphans  -d $npm_config_services",
        "stop": "export $(grep -v '^#' config.env | xargs) && docker compose down --remove-orphans",
        "down": "npm run stop",
        "exec": "export $(grep -v '^#' config.env | xargs) && docker compose -f docker-compose.yml exec -it",
        "prune": "docker system prune",
        "remove-all-containers": "docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q) || echo 'No running containers'",
        "prepare": "husky install",
        "backup": "bash backup.sh",
        "update": "npm run prerun && export $(grep -v '^#' config.env | xargs) && docker compose pull && npm run start",
        "dep-check": "npm install -g depcheck && depcheck ./ --skip-missing=true"
    },
    "repository": {
        "type": "git",
        "url": "git+https://gitlab.com/oneuptime/app.git"
    },
    "keywords": [],
    "author": "",
    "license": "MIT",
    "bugs": {
        "url": "https://gitlab.com/oneuptime/app/issues"
    },
    "homepage": "https://gitlab.com/oneuptime/app#readme"
}
